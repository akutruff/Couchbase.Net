using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;

namespace FastCouch.Tests
{
    [TestFixture]
    public class ParserTest
    {
        [Test]
        public void MapParser()
        {
            var json = "{\"name\":\"default\",\"bucketType\":\"membase\",\"authType\":\"sasl\",\"saslPassword\":\"\",\"proxyPort\":0,\"uri\":\"/pools/default/buckets/default\",\"streamingUri\":\"/pools/default/bucketsStreaming/default\",\"flushCacheUri\":\"/pools/default/buckets/default/controller/doFlush\",\"nodes\":[{\"couchApiBase\":\"http://192.168.1.9:8092/default\",\"replication\":0.0,\"clusterMembership\":\"active\",\"status\":\"healthy\",\"thisNode\":true,\"hostname\":\"192.168.1.9:8091\",\"clusterCompatibility\":1,\"version\":\"2.0.0r-388-gf35126e-community\",\"os\":\"windows\",\"ports\":{\"proxy\":11211,\"direct\":11210}}],\"stats\":{\"uri\":\"/pools/default/buckets/default/stats\",\"directoryURI\":\"/pools/default/buckets/default/statsDirectory\",\"nodeStatsListURI\":\"/pools/default/buckets/default/nodes\"},\"nodeLocator\":\"vbucket\",\"autoCompactionSettings\":false,\"vBucketServerMap\":{\"hashAlgorithm\":\"CRC\",\"numReplicas\":1,\"serverList\":[\"192.168.1.9:11210\"],\"vBucketMap},\"bucketCapabilitiesVer\":\"sync-1.0\",\"bucketCapabilities\":[\"touch\",\"sync\",\"couchapi\"]}";
            Cluster cluster = new Cluster();
            ClusterParser.Instance.Parse(json, cluster);
        }
    }
}
